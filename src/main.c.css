#include <css/tokenizer.h>
#include <utils/stream/stream.h>
#include <utils/stream/string_wc_consumable.h>

#include <stdio.h>

void print_token(CSSToken* t)
{
    switch (t->type)
    {
    case CSSTokenType_whitespace:
        printf("<whitespace-token>");
        break;
    case CSSTokenType_badString:
        printf("<bad-string-token>");
        break;
    case CSSTokenType_string:
        printf("<string-token value=\"%ls\">", t->as.string.value->data);
        break;
    case CSSTokenType_hash:
        printf("<hash-token value=\"%ls\" type=%s>", t->as.hash.value->data, t->as.hash.type == CSSToken_hash_id ? "id" : "unrestricted");
        break;
    case CSSTokenType_leftParenthesis:
        printf("<left-parenthesis-token>");
        break;
    case CSSTokenType_rightParenthesis:
        printf("<right-parenthesis-token>");
        break;
    case CSSTokenType_comma:
        printf("<comma-token>");
        break;
    case CSSTokenType_colon:
        printf("<colon-token>");
        break;
    case CSSTokenType_semicolon:
        printf("<semicolon-token>");
        break;
    case CSSTokenType_delim:
        printf("<delim-token value=%lc>", t->as.delim.value);
        break;
    case CSSTokenType_number:
        printf("<number-token value=%f type=%s>", t->as.number.value, t->as.number.type == CSSToken_number_integer ? "integer" : "number");
        break;
    case CSSTokenType_percentage:
        printf("<percentage-token value=%f%%>", t->as.percentage.value);
        break;
    case CSSTokenType_dimension:
        printf("<dimension-token value=%f unit=\"%ls\" type=%s>", t->as.dimension.value, t->as.dimension.unit->data, t->as.dimension.type == CSSToken_dimension_integer ? "integer" : "number");
        break;
    case CSSTokenType_CDC:
        printf("<cdc-token>");
        break;
    case CSSTokenType_url:
        printf("<url-token value=\"%ls\">", t->as.url.value->data);
        break;
    case CSSTokenType_badUrl:
        printf("<bad-url-token>");
        break;
    case CSSTokenType_function:
        printf("<function-token value=\"%ls\">", t->as.function.value->data);
        break;
    case CSSTokenType_atKeyword:
        printf("<at-keyword-token value=\"%ls\">", t->as.atKeyword.value->data);
        break;
    case CSSTokenType_CDO:
        printf("<cdo-token>");
        break;
    case CSSTokenType_leftCurlyBracket:
        printf("<left-curly-bracket-token>");
        break;
    case CSSTokenType_rightCurlyBracket:
        printf("<right-curly-bracket-token>");
        break;
    case CSSTokenType_leftSquareBracket:
        printf("<left-square-bracket-token>");
        break;
    case CSSTokenType_rightSquareBracket:
        printf("<right-square-bracket-token>");
        break;
    case CSSTokenType_ident:
        printf("<ident-token value=\"%ls\">", t->as.ident.value->data);
        break;
    case CSSTokenType_EOF:
        printf("<EOF-token>");
        break;
    }
}

int main()
{
    // freopen("/dev/null", "w", stderr);
    setvbuf(stdout, NULL, _IONBF, 0);

    WCStream* input_stream = WCStream_new((WCConsumable*)StringWCConsumable_new(
L"-->"
    ));
    
    CSSTokenizer* tokenizer = CSSTokenizer_new(input_stream);
    
    while(true)
    {
        CSSToken* token = tokenizer->ConsumeToken();
        bool eof = token->type == CSSTokenType_EOF;

        print_token(token);

        tokenizer->DisposeToken(token);
        if(eof)
            break;
    }

    CSSTokenizer_delete(tokenizer);
}